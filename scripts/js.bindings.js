const _WASM_IMPORTS = {
    debug_getData(index) {},
    debug_addData(value) {},
    debug_getLength() {},
    debug_clearAll() {},
    debug_testPanic() {},
    debug_testBreakpoint() {},
    debug_testTrap() {},
    diff_getData(index) {},
    diff_getLength() {},
    diff_addData(data) {},
    diff_clearAll() {},
    editor_attachLayerToWorld(layer_index, world_index) {},
    editor_setWorldLayerCoordinateData(world_id, layer_index, x, y, value) {},
    editor_addRowToWorld(world_index) {},
    editor_removeRowFromWorld(world_index) {},
    editor_addColumnToWorld(world_index) {},
    editor_removeColumnFromWorld(world_index) {},
    editor_moveLayer(world_index, layer_index, new_index) {},
    editor_createLayer(width, height) {},
    editor_createWorld(width, height) {},
    editor_createEntity(entity_type, entity_id) {},
    editor_clearLayers() {},
    editor_clearAll() {},
    editor_getWorldMemoryLocation(world_id) {},
    editor_getWorldMemoryLength(world_id) {},
    editor_getEntityMemoryLocation(entity_id) {},
    editor_getEntityMemoryLength(entity_id) {},
    editor_getEntityMemoryLocationByIndex(entity_index) {},
    editor_getEntityMemoryLengthByIndex(entity_index) {},
    editor_getWorldLayerMemoryLocation(world_id, layer_index) {},
    editor_getWorldLayerMemoryLength(world_id, layer_index) {},
    editor_getLayerMemoryLocation(layer_index) {},
    editor_getLayerMemoryLength(layer_index) {},
    inputs_inputUp(entity) {},
    inputs_inputDown(entity) {},
    inputs_inputLeft(entity) {},
    inputs_inputRight(entity) {},
    game_processTick() {},
    game_entityIncrementHealth(entity) {},
    game_entityDecrementHealth(entity) {},
    game_entityAttack(entity, target, crit_buff) {},
    game_entityGetHealth(entity_id) {},
    game_entityGetWorldX(entity) {},
    game_entityGetWorldY(entity) {},
    game_entityGetType(entity_id) {},
    game_entityEnableCollision(entity_id) {},
    game_entityDisableCollision(entity_id) {},
    game_getEntitiesLength() {},
    game_getEntityIdByIndex(index) {},
    game_getEntityTypeByIndex(index) {},
    game_entitySetHealth(entity_id, value) {},
    game_entityGetPositionX(entity_id) {},
    game_entityGetPositionY(entity_id) {},
    game_entitySetPositionX(entity_id, value) {},
    game_entitySetPositionY(entity_id, value) {},
    game_initializeGame() {},
    game_loadWorld(index) {},
    game_getCurrentWorldIndex() {},
    game_getCurrentWorldWidth() {},
    game_getCurrentWorldHeight() {},
    game_getCurrentWorldCollisionLayer() {},
    game_getCurrentWorldEntityLayer() {},
    game_setCurrentWorldCollisionLayer(layer_index) {},
    game_setCurrentWorldEntityLayer(layer_index) {},
    game_getCurrentWorldTotalLayers() {},
    game_getWorldData(world_index, layer_index, x, y) {},
    game_getCurrentWorldLayerRawData(layer_index, x, y) {},
    game_resetWorldData(world_index) {},
    game_resetWorldLayerData(world_index, layer_index) {},
    game_getWorldDataAtViewportCoordinate(layer_index, x, y) {},
    game_translateViewportXToWorldX(x) {},
    game_translateViewportYToWorldY(y) {},
    renderer_getPositionX() {},
    renderer_getPositionY() {},
    renderer_setPosition(x, y) {},
    viewport_setSize(width, height) {},
    viewport_setCamera(x, y) {},
    viewport_getCameraX() {},
    viewport_getCameraY() {},
    viewport_moveCameraUp() {},
    viewport_moveCameraDown() {},
    viewport_moveCameraLeft() {},
    viewport_moveCameraRight() {},
    viewport_initializeViewportData() {},
    viewport_setData(x, y, value) {},
    viewport_getData(x, y) {},
    viewport_getDataByIndex(index) {},
    viewport_getSizeWidth() {},
    viewport_getSizeHeight() {},
    viewport_setPaddingTop(value) {},
    viewport_setPaddingBottom(value) {},
    viewport_setPaddingLeft(value) {},
    viewport_setPaddingRight(value) {},
    viewport_getPaddingTop() {},
    viewport_getPaddingBottom() {},
    viewport_getPaddingLeft() {},
    viewport_getPaddingRight() {},
    viewport_getXFromIndex(index) {},
    viewport_getYFromIndex(index) {},
    viewport_getLength() {},
    viewport_clear() {},
    messages_moveUp(entity_id, force) {},
    messages_moveDown(entity_id, force) {},
    messages_moveLeft(entity_id, force) {},
    messages_moveRight(entity_id, force) {},
    messages_attack(entity_id, force) {},
    events_attack(entity_id, target_entity_id, force) {},
};
